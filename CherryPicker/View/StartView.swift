//
//  StartView.swift
//  CherryPicker
//
//  Created by ÍπÄÎèÑÌòï on 2023/04/30.
//

import SwiftUI
import AuthenticationServices

struct StartView: View {
    @Namespace var heroEffect
    
    @EnvironmentObject var userViewModel: UserViewModel
    
    @Binding var isCherryPick: Bool
    
    @State private var showSignInView = false
    @State private var showSignUpView = false
    @State private var categoryIndicatorOffsetY = CGFloat.zero
    @State private var contentID = 0
    @State private var contentOffsetY = CGFloat.zero
    @State private var dragOffsetY = CGFloat.zero
    @State private var isCategoryContent = false
    @State private var isFastDragging = false
    
    var body: some View {
        NavigationStack {
            GeometryReader { reader in
                let height = reader.size.height
                let width = reader.size.width
                
                LazyVStack {
                    startContents(height: height)
                        .frame(width: width, height: height)
                    
                    categoryContents(height: height)
                        .frame(width: width, height: height)
                }
                .modifier(BackgroundModifier())
                .offset(y: contentOffsetY)
                .gesture(
                    DragGesture()
                        .onChanged({ drag in
                            DispatchQueue.global(qos: .userInteractive).async {
                                let moveY = drag.translation.height
                                let velocity = contentOffsetY - moveY
                                
                                if !isFastDragging {
                                    isFastDragging = ((velocity < 0) ? -velocity : velocity) >= 30
                                }
                                
                                print(isFastDragging)
                                
                                isCategoryContent ? showingStartContent(moveY: moveY, height: height) : showingCategoryContent(moveY: moveY)
                            }
                        })
                        .onEnded({ drag in
                            DispatchQueue.global(qos: .userInteractive).async {
                                isCategoryContent ? showStartContent(height: height) : showCategoryContent(height: height)
                                
                                isFastDragging = false
                            }
                        })
                )
                .modifier(BackgroundModifier())
                .navigationTitle("")
                .navigationBarTitleDisplayMode(.inline)
                .toolbar {
                    ToolbarItem {
                        NavigationLink {
                            MenuView()
                        } label: {
                            Label("Î©îÎâ¥", systemImage: "line.3.horizontal")
                                .foregroundColor(Color("main-point-color"))
                        }
                    }
                }
                .sheet(isPresented: $showSignInView) {
                    signIn()
                        .presentationDetents([.medium])
                }
                .sheet(isPresented: $showSignUpView) {
                    signUp()
                        .presentationDetents([.medium])
                }
            }
        }
        .tint(Color("main-point-color"))
    }
    
    @ViewBuilder
    func startButton() -> some View {
        Button {
            showSignInView = true
        } label: {
            HStack {
                Spacer()
                
                Text("ÏãúÏûëÌïòÍ∏∞")
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(Color("main-point-color"))
                    .padding(.vertical)
                
                Spacer()
            }
            .background {
                ZStack {
                    RoundedRectangle(cornerRadius: 20, style: .continuous)
                        .fill(Color("background-shape-color"))
                    
                    RoundedRectangle(cornerRadius: 20, style: .continuous)
                        .strokeBorder(Color("main-point-color"), lineWidth: 2)
                        .shadow(radius: 10)
                }
            }
        }
        .frame(maxWidth: 400)
        .padding(.horizontal, 70)
        .padding(.vertical, 40)
    }
    
    @ViewBuilder
    func categoryIndicator(height: CGFloat) -> some View {
        HStack {
            Spacer()
            
            VStack(alignment: .center) {
                ZStack {
                    Text("Ïπ¥ÌÖåÍ≥†Î¶¨Î°ú ÏãúÏûëÌïòÍ∏∞")
                        .opacity(isCategoryContent ? 0 : 1)
                    
                    Text("Ïπ¥ÌÖåÍ≥†Î¶¨ ÏóÜÏù¥ ÏãúÏûëÌïòÍ∏∞")
                        .opacity(isCategoryContent ? 1 : 0)
                }
                .font(.subheadline)
                .fontWeight(.bold)
                .foregroundColor(Color("main-point-color-weak"))
                .padding(.bottom)
                
                Label("ÎÇ¥Î¶¨Í∏∞", systemImage: "chevron.compact.up")
                    .labelStyle(.iconOnly)
                    .font(.title)
                    .foregroundColor(Color("main-point-color-weak"))
                    .rotationEffect(.degrees(isCategoryContent ? 180 : 0))
            }
            
            Spacer()
        }
        .offset(y: categoryIndicatorOffsetY)
        .matchedGeometryEffect(id: "indicator", in: heroEffect)
        .animation(Animation.interactiveSpring(response: 1.2, dampingFraction: 1.2, blendDuration: 1.2).repeatForever(autoreverses: true), value: categoryIndicatorOffsetY)
        .onAppear {
            categoryIndicatorOffsetY = isCategoryContent ? 0 : 15
        }
        .padding(.bottom, isCategoryContent ? 0 : nil)
        
    }
    
    @ViewBuilder
    func startContents(height: CGFloat) -> some View {
        VStack {
            Text("üçí")
                .font(.system(size: 100))
                .padding(.top, 50)
            
            Spacer()
            
            Text("ÎßõÏûàÎäî ÏùåÏãùÏ†êÏùÑ Ï∞æÍ≥†\n Ïã∂ÏúºÏã†Í∞ÄÏöî?")
                .multilineTextAlignment(.center)
                .font(.title)
                .fontWeight(.bold)
                .foregroundColor(Color("main-point-color"))
                .padding(.horizontal)
            
            HStack {
                Spacer()
                
                startButton()
                
                Spacer()
            }
            
            Text("ÏßÄÍ≤®Ïö¥ Î©îÎâ¥ Í≥†ÎØºÏùÄ Í∑∏Îßå! Ïù¥Ï†úÎäî ÏùåÏãùÎèÑ \nÏû¨ÎØ∏ÏûàÍ≤å Cherry Picker.")
                .multilineTextAlignment(.center)
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(Color("secondary-text-color-strong"))
                .padding(.bottom, isCategoryContent ? 150 : 80)
        }
        .overlay(alignment: .bottom) {
            if !isCategoryContent {
                categoryIndicator(height: height)
            }
        }
    }
    
    @ViewBuilder
    func categoryContents(height: CGFloat) -> some View {
        VStack(spacing: 30) {
            Text("Îî∞Î°ú ÏõêÌïòÏãúÎäî Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏûàÏúºÏã†Í∞ÄÏöî?")
                .multilineTextAlignment(.center)
                .font(.title3)
                .fontWeight(.bold)
                .foregroundColor(Color("main-point-color"))
                .padding(.horizontal)
                .padding(.top, 70)
            
            Text("Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî!\nÌï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò ÌÉúÍ∑∏Îì§ÏùÑ Í∞ÄÏßÑ ÏùåÏãùÏ†êÎßå\nÏ∂îÏ≤úÌï¥ ÎìúÎ¶¥Í≤åÏöî!")
                .multilineTextAlignment(.center)
                .font(.subheadline)
                .fontWeight(.bold)
                .foregroundColor(Color("secondary-text-color-strong"))
                .padding(.horizontal)
            
            ViewThatFits {
                VStack(spacing: 0) {
                    categoryList()
                    
                    Spacer()
                }
                
                ScrollView {
                    categoryList()
                        .padding(.bottom)
                }
            }
        }
        .overlay(alignment: .top) {
            if isCategoryContent {
                categoryIndicator(height: height)
            }
        }
    }
    
    @ViewBuilder
    func categoryList() -> some View {
        LazyVStack(spacing: 40) {
            categoryButton(title: "\"\("Îã®Ï≤¥Î™®ÏûÑ")\"", tags: ["ÏæåÏ†ÅÌïú Í≥µÍ∞Ñ", "Ìë∏ÏßêÌï¥Ïöî", "Îã®Ï≤¥Î™®ÏûÑ", "Í∞ÄÏÑ±ÎπÑ ÎßõÏßë"])
            
            categoryButton(title: "\"\("Ïπ¥Ìéò/Í≥µÎ∂Ä")\"", tags: ["Ïπ¥Ìéò", "Ïª§ÌîºÎßõÏßë", "Ïò§Îûò ÏûàÍ∏∞ Ï¢ãÏïÑÏöî", "ÎßõÏûàÎäî ÏùåÎ£å"])
            
            categoryButton(title: "\"\("ÏÇ¨ÏßÑÎßõÏßë")\"", tags: ["Ïª®ÏÖâÏù¥ ÎèÖÌäπÌï¥Ïöî", "Í∞êÏÑ±ÏÇ¨ÏßÑ"])
            
            categoryButton(title: "\"\("ÌòºÎ∞•")\"", tags: ["Í∞ÄÏÑ±ÎπÑ ÎßõÏßë", "ÌòºÎ∞•ÌïòÍ∏∞ Ï¢ãÏïÑÏöî"])
        }
    }
    
    @ViewBuilder
    func categoryButton(title: String, tags: [String]) -> some View {
        Button {
            showSignInView = true
        } label: {
            VStack(spacing: 0) {
                HStack {
                    Spacer()
                    
                    Text(title)
                        .font(.title3)
                        .fontWeight(.bold)
                        .foregroundColor(Color("main-point-color"))
                    
                    Spacer()
                }
                .padding(.bottom)
                
                HStack {
                    Spacer()
                    
                    ForEach(tags, id: \.self) { tag in
                        Text("#\(tag)")
                            .font(.footnote)
                            .fontWeight(.semibold)
                            .foregroundColor(Color("secondary-text-color-weak"))
                    }
                    
                    Spacer()
                }
            }
            .padding(.vertical)
            .background {
                ZStack {
                    RoundedRectangle(cornerRadius: 20, style: .continuous)
                        .fill(Color("background-shape-color"))
                    
                    RoundedRectangle(cornerRadius: 20, style: .continuous)
                        .strokeBorder(Color("main-point-color-weak"), lineWidth: 2)
                        .shadow(color: .black.opacity(0.1), radius: 5)
                }
            }
        }
        .frame(maxWidth: 500)
        .padding(.horizontal, 30)
    }
    
    @ViewBuilder
    func signIn() -> some View {
        VStack {
            HStack {
                Text("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï¥Ïöî")
                    .font(.title)
                    .fontWeight(.bold)
                    .foregroundColor(Color("main-point-color"))
                
                Spacer()
            }
            .padding()
            .padding(.top)
            
            SignInWithAppleButton(
                onRequest: { request in
                    // Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ïãú Ï≤òÎ¶¨Ìï† ÏΩîÎìú
                    
                    //ÏÑúÎ≤Ñ Ïó∞Í≤∞ÎêòÎ©¥ ÏÇ≠Ï†ú ÏòàÏ†ï
                    withAnimation(.easeInOut) {
                        showSignInView = false
                        isCherryPick = true
                    }
                },
                onCompletion: { result in
                    // Î°úÍ∑∏Ïù∏ Í≤∞Í≥º Ï≤òÎ¶¨Ìï† ÏΩîÎìú
                    switch result {
                    case .success(let authResults):
                        // Ïù∏Ï¶ù Í≤∞Í≥º Ï≤òÎ¶¨
                        break
                    case .failure(let error):
                        // Ïù∏Ï¶ù Ïã§Ìå® Ï≤òÎ¶¨
                        break
                    }
                }
            )
            .padding(.horizontal, 30)
            .padding(.vertical)
            .frame(height: 80)
            .cornerRadius(10)
            
            Spacer()
            
            Text("ÌòπÏãú ÌöåÏõêÏù¥ ÏïÑÎãàÏã†Í∞ÄÏöî?")
                .fontWeight(.bold)
                .foregroundColor(Color("main-text-color"))
                .padding()
            
            Button {
                showSignInView = false
                
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    showSignUpView = true
                }
            } label: {
                Text("ÌöåÏõêÍ∞ÄÏûÖ ÌïòÎü¨ Í∞ÄÍ∏∞")
                    .fontWeight(.bold)
                    .foregroundColor(Color("main-point-color-weak"))
            }
            .padding()
            
        }
        .background(Color("background-shape-color"))
    }
    
    @ViewBuilder
    func signUp() -> some View {
        VStack {
            VStack {
                HStack {
                    Text("ÌôòÏòÅÌï©ÎãàÎã§!")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(Color("main-point-color"))
                    
                    Spacer()
                }
                .padding()
                .padding(.top)
                
                SignInWithAppleButton(
                    onRequest: { request in
                        // Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ïãú Ï≤òÎ¶¨Ìï† ÏΩîÎìú
                        
                        //ÏÑúÎ≤Ñ Ïó∞Í≤∞ÎêòÎ©¥ ÏÇ≠Ï†ú ÏòàÏ†ï
                        withAnimation(.easeInOut) {
                            showSignUpView = false
                            isCherryPick = true
                        }
                    },
                    onCompletion: { result in
                        // Î°úÍ∑∏Ïù∏ Í≤∞Í≥º Ï≤òÎ¶¨Ìï† ÏΩîÎìú
                        switch result {
                        case .success(let authResults):
                            // Ïù∏Ï¶ù Í≤∞Í≥º Ï≤òÎ¶¨
                            break
                        case .failure(let error):
                            // Ïù∏Ï¶ù Ïã§Ìå® Ï≤òÎ¶¨
                            break
                        }
                    }
                )
                .padding(.horizontal, 30)
                .padding(.vertical)
                .frame(height: 80)
                .cornerRadius(10)
                
                Spacer()
                
                Text("ÌòπÏãú ÌöåÏõêÏù¥Ïã†Í∞ÄÏöî?")
                    .fontWeight(.bold)
                    .foregroundColor(Color("main-text-color"))
                    .padding()
                
                Button {
                    showSignUpView = false
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                        showSignInView = true
                    }
                } label: {
                    Text("Î°úÍ∑∏Ïù∏ ÌïòÎü¨ Í∞ÄÍ∏∞")
                        .fontWeight(.bold)
                        .foregroundColor(Color("main-point-color-weak"))
                }
                .padding()
                
            }
            .background(Color("background-shape-color"))
        }
    }
    
    func showingStartContent(moveY: CGFloat, height: CGFloat) {
        contentOffsetY = ((contentOffsetY < -height && moveY < 0) ? (moveY / 3) : moveY) + dragOffsetY
    }
    
    func showingCategoryContent(moveY: CGFloat) {
        contentOffsetY = ((contentOffsetY < 0) ? moveY : (moveY / 3)) + dragOffsetY
    }
    
    func showCategoryContent(height: CGFloat) {
        withAnimation(.spring()) {
            isCategoryContent = contentOffsetY < -150 || isFastDragging
            
            contentOffsetY = isCategoryContent ? -height : 0
        }
        
        dragOffsetY += contentOffsetY
        
        categoryIndicatorOffsetY = 0
    }
    
    func showStartContent(height: CGFloat) {
        withAnimation(.spring()) {
            isCategoryContent = contentOffsetY < -550 || !isFastDragging
            
            contentOffsetY = isCategoryContent ? -height : 0
        }
        dragOffsetY = contentOffsetY
        
        categoryIndicatorOffsetY = 15
    }
}

struct StartView_Previews: PreviewProvider {
    static var previews: some View {
        StartView(isCherryPick: .constant(false))
            .environmentObject(UserViewModel())
    }
}
